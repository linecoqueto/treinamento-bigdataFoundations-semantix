
##---------------------------------------------------------------
#1. Criar o DataFrame alunosDF para ler o arquivo no hdfs “/user/aluno/<nome>/data/escola/alunos.csv” sem usar as “option”
##---------------------------------------------------------------

scala> val alunosDF = spark.read.csv("/user/aluno/aline/data/escola/alunos.csv")
alunosDF: org.apache.spark.sql.DataFrame = [_c0: string, _c1: string ... 5 more fields]


##---------------------------------------------------------------
#2. Visualizar o esquema do alunosDF
##---------------------------------------------------------------

scala> alunosDF.printSchema
root
 |-- _c0: string (nullable = true)
 |-- _c1: string (nullable = true)
 |-- _c2: string (nullable = true)
 |-- _c3: string (nullable = true)
 |-- _c4: string (nullable = true)
 |-- _c5: string (nullable = true)
 |-- _c6: string (nullable = true)


##---------------------------------------------------------------
#3. Criar o DataFrame alunosDF para ler o arquivo “/user/aluno/<nome>/data/escola/alunos.csv” com a opção de Incluir o cabeçalho
##---------------------------------------------------------------

scala> val alunosDF = spark.read.option("header","true").csv("/user/aluno/aline/data/escola/alunos.csv")
alunosDF: org.apache.spark.sql.DataFrame = [id_discente: string, nome: string ... 5 more fields]

##---------------------------------------------------------------
#4. Visualizar o esquema do alunosDF
##---------------------------------------------------------------

scala> alunosDF.printSchema()
root
 |-- id_discente: string (nullable = true)
 |-- nome: string (nullable = true)
 |-- ano_ingresso: string (nullable = true)
 |-- periodo_ingresso: string (nullable = true)
 |-- nivel: string (nullable = true)
 |-- id_forma_ingresso: string (nullable = true)
 |-- id_curso: string (nullable = true)


##---------------------------------------------------------------
#5. Criar o DataFrame alunosDF para ler o arquivo “/user/aluno/<nome>/data/escola/alunos.csv” com a opção de Incluir o cabeçalho e inferir o esquema
##---------------------------------------------------------------

scala> val alunosDF = spark.read.option("header","true").option("inferSchema","true").csv("/user/aluno/aline/data/escola/alunos.csv")
alunosDF: org.apache.spark.sql.DataFrame = [id_discente: int, nome: string ... 5 more fields]


##---------------------------------------------------------------
#6. Visualizar o esquema do alunosDF
##---------------------------------------------------------------

scala> alunosDF.printSchema()
root
 |-- id_discente: integer (nullable = true)
 |-- nome: string (nullable = true)
 |-- ano_ingresso: integer (nullable = true)
 |-- periodo_ingresso: integer (nullable = true)
 |-- nivel: string (nullable = true)
 |-- id_forma_ingresso: integer (nullable = true)
 |-- id_curso: integer (nullable = true)


##---------------------------------------------------------------
#7. Salvar o DaraFrame alunosDF como tabela Hive “tab_alunos” no banco de dados <nome>
##---------------------------------------------------------------

alunosDF.write.saveAsTable("db_aline.tab_alunos")


##---------------------------------------------------------------
#8. Criar o DataFrame cursosDF para ler o arquivo “/user/aluno/<nome>/data/escola/cursos.csv” com a opção de Incluir o cabeçalho e inferir o esquema
##---------------------------------------------------------------

scala> val cursosDF = spark.read.option("header","true").option("inferSchemar","true").csv("/user/aluno/aline/data/escola/cursos.csv")
cursosDF: org.apache.spark.sql.DataFrame = [id_curso: string, id_unidade: string ... 10 more fields]


##---------------------------------------------------------------
#9. Criar o DataFrame alunos_cursosDF com o inner join do alunosDF e cursosDF quando o id_curso dos 2 forem o mesmo
##---------------------------------------------------------------

scala> val alunos_cursosDF = alunosDF.join(cursosDF,"id_curso")
alunos_cursosDF: org.apache.spark.sql.DataFrame = [id_curso: int, id_discente: int ... 16 more fields]


##---------------------------------------------------------------
#10. Visualizar os dados, o esquema e a quantidade de registros do alunos_cursosDF
##---------------------------------------------------------------

alunos_cursosDF.show(10)

scala> alunos_cursosDF.count()
res22: Long = 9954
